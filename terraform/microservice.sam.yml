AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Slalom Galactic Salesforce Integration
Parameters:
  paramEnvironment:
    Type: String
    Description: Which environment do you want to deploy to? (local,dev, or prod)
    AllowedValues:
    - local
    - dev
    - test
    - prod
    Default: local
  paramFeatureBranch:
    Type: String
    Description: Provide the name of the feature branch if this in not a build from the master code branch.
    Default: ""
  paramServiceName:
    Type: String
    Description: The name of the service
    Default: galactic-salesforce-integration
  paramReleaseVersion:
    Type: String
    Description: The Release Version number
    Default: 0.0.1
  paramBuildBasePath:
    Type: String
    Description: Option to build the API Gateway Base Path Mapping (requires a Custom Domain to be pre-configured)
    AllowedValues:
    - yes
    - no
    Default: yes
  paramLogRetention:
    Type: Number
    Description: Number of days to keep logs
    Default: 30

Mappings:
  # SETUP: Customize your microservice with environment-specific configuration in this section
  # The mappings section doesn't fully support Intrinsic functions like !Ref or !Sub
  # so values here need to be hard-coded instead of based on parameters.
  env:
    local:
      awsDeveloperGalacticAccountId: 704106533062
      domain: dev.sales.sales-gapi.com
      exampleExternalDomain: http://google.com
      salesforceConsumerKey: salesforce/consumer-key
      salesforceLoginDomain: https://test.salesforce.com
      salesforcePrivateKey: salesforce/private-key
      salesforceUser: sales.gapi@slalom.com.ace
      secretName: dev-galactic-salesforce-integration
      s3AceBucketNameMap: dev-galactic-ace-events
      s3AceBucketKMSKeyARN: arn:aws:kms:us-east-1:704106533062:key/24e3988a-20fd-4929-9e35-0d46c09b5fe4
      sfdcSecretManagerConsumerKeyArn: arn:aws:secretsmanager:us-east-1:136379169253:secret:salesforce/consumer-key-prjRk3
    dev:
      awsDeveloperGalacticAccountId: 704106533062
      domain: dev.sales.sales-gapi.com
      exampleExternalDomain: http://google.com
      salesforceConsumerKey: salesforce/consumer-key
      salesforceLoginDomain: https://test.salesforce.com
      salesforcePrivateKey: salesforce/private-key
      salesforceUser: sales.gapi@slalom.com.ace
      secretName: dev-galactic-salesforce-integration
      s3AceBucketNameMap: dev-galactic-ace-events
      s3AceBucketKMSKeyARN: arn:aws:kms:us-east-1:704106533062:key/24e3988a-20fd-4929-9e35-0d46c09b5fe4
      sfdcSecretManagerConsumerKeyArn: arn:aws:secretsmanager:us-east-1:136379169253:secret:salesforce/consumer-key-prjRk3
    test:
      awsDeveloperGalacticAccountId: 704106533062
      domain: test.sales.sales-gapi.com
      exampleExternalDomain: http://google.com
      salesforceConsumerKey: salesforce/consumer-key
      salesforceLoginDomain: https://test.salesforce.com
      salesforcePrivateKey: salesforce/private-key
      salesforceUser: sales.gapi@slalom.com.ace
      secretName: test-galactic-salesforce-integration
      s3AceBucketNameMap: dev-galactic-ace-events
      s3AceBucketKMSKeyARN: arn:aws:kms:us-east-1:704106533062:key/24e3988a-20fd-4929-9e35-0d46c09b5fe4
      sfdcSecretManagerConsumerKeyArn: arn:aws:secretsmanager:us-east-1:136379169253:secret:salesforce/consumer-key-prjRk3
    prod:
      awsDeveloperGalacticAccountId: 704106533062
      domain: sales-gapi.com
      exampleExternalDomain: http://google.com
      salesforceConsumerKey: salesforce/consumer-key
      salesforceLoginDomain: https://test.salesforce.com
      salesforcePrivateKey: salesforce/private-key
      salesforceUser: sales.gapi@slalom.com.ace
      secretName: prod-galactic-salesforce-integration
      s3AceBucketNameMap: dev-galactic-ace-events
      s3AceBucketKMSKeyARN: arn:aws:kms:us-east-1:704106533062:key/24e3988a-20fd-4929-9e35-0d46c09b5fe4
      sfdcSecretManagerConsumerKeyArn: arn:aws:secretsmanager:us-east-1:136379169253:secret:salesforce/consumer-key-prjRk3

Conditions:
  conditionIsLocal: !Equals [ !Ref paramEnvironment, "local"]
  conditionIsProd: !Equals [ !Ref paramEnvironment, prod ]
  condNotFeatureBranch: !Equals [!Ref paramFeatureBranch, ""]
  conditionBuildBasePath: !Equals [ !Ref paramBuildBasePath, yes ]
  conditionIsProdOrTest: !Or [!Equals [!Ref paramEnvironment, test], !Equals [!Ref paramEnvironment, prod]]

Globals:
  Function:
    # Properties of AWS::Serverless::Function
    Runtime: nodejs12.x
    MemorySize: 512
    Timeout: 30
    Environment:
      Variables:
        # Add any additional environment variables here
        serviceName: !Ref paramServiceName
        environmentName: !Ref paramEnvironment
        releaseVersion: !Ref paramReleaseVersion
        logLevel: info
        domain: !FindInMap [ env, !Ref paramEnvironment, domain ]
        exampleExternalDomain: !FindInMap [ env, !Ref paramEnvironment, exampleExternalDomain ]
        secretName: !FindInMap [ env, !Ref paramEnvironment, secretName ]
        dbTableName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}"
        tokenTableName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_tokens"
        salesforceLoginDomain: !FindInMap [ env, !Ref paramEnvironment, salesforceLoginDomain ]
        salesforceConsumerKey: !FindInMap [ env, !Ref paramEnvironment, salesforceConsumerKey ]
        salesforcePrivateKey: !FindInMap [ env, !Ref paramEnvironment, salesforcePrivateKey ]
        salesforceUser: !FindInMap [ env, !Ref paramEnvironment, salesforceUser ]
        lambdaOppExecuteExportJob: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_oppExecuteExportJob"
        s3UploadsBucketName: !Sub "${paramEnvironment}-galactic-api-push"
        engagementARN: !Sub "arn:aws:sns:${AWS::Region}:${AWS::AccountId}:${paramEnvironment}_sales_engagementUpdated"
        inboundOppTopicARN: !Ref resInboundSnsOpportunityTopic
        outboundOppTopicARN: !Ref resOutboundSnsOpportunityTopic
        inboundAceTopicARN: !Ref resInboundPartnerLeadProcessorTopic
        outboundAceTopicARN: !Ref resOutboundSnsPartnerLeadTopic
        s3AceBucketName: dev-galactic-ace-events
        outboundSfSharedOppTopicARN: !Ref resSfOppSharedProcessorOutTopic
        sharedProcessorInTopicARN: !Ref resSfOppSharedProcessorInTopic
    Tags:
      Application: !Ref paramServiceName
      Environment: !Ref paramEnvironment
    Tracing: !If # Turn on X-Ray Tracing for Prod only
      - conditionIsProd
      - Active
      - !Ref AWS::NoValue

Resources:
  ### resSalesforceEventBucket: Deploys per environment for salesforce event storage
  resSalesforceEventBucket:
    Type: AWS::S3::Bucket # checkov:skip=BC_AWS_S3_13: Access logging unneccessary for now(involves creating addition bucket for logs)
    Properties:
      PublicAccessBlockConfiguration:
        BlockPublicAcls: True
        BlockPublicPolicy: True
        IgnorePublicAcls: True
        RestrictPublicBuckets: True
      BucketName: !If
        - conditionIsProd
        - !Sub "${paramEnvironment}-${paramServiceName}-salesforce-events"
        - !Sub "${paramEnvironment}${paramFeatureBranch}-${paramServiceName}-salesforce-events"
      VersioningConfiguration:
        Status: Enabled
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256

  # Lambda Function Definitions
  ### resLambdaHealthGet: This first function is intended to be a health endpoint for semantic monitoring
  ### Extend the code for this function as you add new external dependencies like databases or external api requests
  resLambdaHealthGet: # Name each lambda logical id something unique to this template
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_healthGet" # Use the handler filename at the end
      CodeUri: dist/healthGet  # Use the filename of your handler, e.g. "healthGet.ts", but without the file extension
      Events:
        api:
          Type: Api
          Properties:
            RestApiId: !Ref resApiGateway
            Path: /health # Unique URL path to hit this endpoint
            Method: GET   # HTTP Method to be used to hit this endpoint
            Auth:
              Authorizer: NONE


  ### resLambdaExampleExternalGet: This lambda function is intended to be an example of how to make an external api request
  ### Delete this function and all related resources once you've established your own patterns for your application
  resLambdaExampleExternalGet: # Name each lambda logical id something unique to this template
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_exampleExternalGet" # Use the handler filename at the end
      CodeUri: dist/exampleExternalGet
      Policies: # Add Policies if your Lambda Function needs access to specific resources
        - Fn::ImportValue: # This policy is needed for this Lambda Function to access the secrets created by the KMS CFN Stack
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"
      Events:
        api:
          Type: Api
          Properties:
            RestApiId: !Ref resApiGateway
            Path: /example-external # Unique URL path to hit this endpoint
            Method: GET # HTTP Method to be used to hit this endpoint

  ### resLambdaExampleDataGet: This lambda function is intended to be an example of how to request data from DynamoDB
  ### Keep this function and adapt it if you use DynamoDB as a datasource. Copy it to create more DynamoDB endpoints.
  resLambdaExampleDataGet: # Name each lambda logical id something unique to this template
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_exampleDataGet" # Use the handler filename at the end
      CodeUri: dist/exampleDataGet
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref resDynamoTable
      Events:
        api:
          Type: Api
          Properties:
            RestApiId: !Ref resApiGateway
            Path: /example-data # Unique URL path to hit this endpoint
            Method: GET   # HTTP Method to be used to hit this endpoint

  ### resLambdaExampleSnsListener: This is an example function triggered by an SNS event
  ### Delete this function if you're not using SNS. Adapt it to your use case if you are using SNS.
  resLambdaExampleSnsListener: # Name each lambda logical id something unique to this template
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_exampleSnsListener" # Use the handler filename at the end
      CodeUri: dist/exampleSnsListener
      Events:
        sns:
          Type: SNS
          Properties:
            Topic: !Ref resExampleSnsTopic

  resLambdaOppCreateExportJob:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_oppCreateExportJob" # Use the handler filename at the end
      CodeUri: dist/oppCreateExportJob
      Policies:
        - Fn::ImportValue: # This policy is needed for this Lambda Function to access the secrets created by the KMS CFN Stack
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"
        - LambdaInvokePolicy:
            FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_oppExecuteExportJob"
        - Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Deny
              Action:
              - dynamodb:*
              NotResource: !GetAtt resSalesforceTokenTable.Arn
      Events:
        api:
          Type: Api
          Properties:
            RestApiId: !Ref resApiGateway
            Path: /opportunities/export
            Method: POST

  resLambdaOppExecuteExportJob:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_oppExecuteExportJob" # Use the handler filename at the end
      CodeUri: dist/oppExecuteExportJob
      Policies:
        - Fn::ImportValue: # This policy is needed for this Lambda Function to access the secrets created by the KMS CFN Stack
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"
        - Statement:
          - Sid: S3
            Effect: "Allow"
            Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:AbortMultipartUpload"
              - "s3:ListMultipartUploadParts"
              - "s3:ListBucketMultipartUploads"
              - "s3:GetBucketAcl"
              - "s3:PutObjectAcl"
            Resource:
              - !Sub "arn:aws:s3:::${paramEnvironment}-galactic-api-push"
              - !Sub "arn:aws:s3:::${paramEnvironment}-galactic-api-push/*"
        - Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Deny
              Action:
              - dynamodb:*
              NotResource: !GetAtt resSalesforceTokenTable.Arn

  ### resS3EventListener
  resLambdaS3EventListener:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_s3EventListener" # Use the handler filename at the end
      CodeUri: dist/s3EventListener
      Policies:
        - S3ReadPolicy:
            BucketName: !If
              - conditionIsProd
              - !Sub "${paramServiceName}-salesforce-events"
              - !Sub "${paramEnvironment}-${paramServiceName}-salesforce-events"
        - SNSPublishMessagePolicy:
            TopicName: !If
              - conditionIsProd
              - !Sub "sales_engagementUpdated"
              - !Sub "${paramEnvironment}_sales_engagementUpdated"
        - SNSPublishMessagePolicy:
            TopicName: !If
              - conditionIsProd
              - !Sub "sales_opportunityUpdated"
              - !Sub "${paramEnvironment}_sales_opportunityUpdated"
      Events:
        resSalesforceEventBucket:
          Type: S3
          Properties:
            Bucket: !Ref resSalesforceEventBucket
            Events: 's3:ObjectCreated:*'
      DeadLetterQueue:
        Type: SQS
        TargetArn: !GetAtt resSalesforceEventListenerDLQ.Arn

  ### resSalesforceEventListenerDLQ
  resSalesforceEventListenerDLQ:
    Type: AWS::SQS::Queue
    Properties:
      KmsMasterKeyId: alias/aws/sqs

  resLambdaOpportunitiesGet:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_opportunitiesGet" # Use the handler filename at the end
      CodeUri: dist/opportunitiesGet
      Policies:
        - Fn::ImportValue:
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"
        - Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Deny
              Action:
              - dynamodb:*
              NotResource: !GetAtt resSalesforceTokenTable.Arn
      Events:
        api:
          Type: Api
          Properties:
            RestApiId: !Ref resApiGateway
            Path: /opportunities
            Method: GET

  resLambdaOpportunitiesPatch:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_opportunitiesPatch"
      CodeUri: dist/opportunitiesPatch
      Policies:
        - Fn::ImportValue:
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"
        - Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Deny
              Action:
              - dynamodb:*
              NotResource: !GetAtt resSalesforceTokenTable.Arn
      Events:
        api:
          Type: Api
          Properties:
            RestApiId: !Ref resApiGateway
            Path: /opportunities/{OpportunityId}
            Method: PATCH

  resLambdaEngagementsPatch:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_engagementsPatch" # Use the handler filename at the end
      CodeUri: dist/engagementsPatch
      Policies: # Add Policies if your Lambda Function needs access to specific resources
        - Fn::ImportValue:
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"
        - Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Deny
              Action:
              - dynamodb:*
              NotResource: !GetAtt resSalesforceTokenTable.Arn
      Events:
        api:
          Type: Api
          Properties:
            RestApiId: !Ref resApiGateway
            Path: /engagements/{EngagementId}
            Method: PATCH

  resLambdaEngagementsGet: # Name each lambda logical id something unique to this template
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_engagementsGet"
      CodeUri: dist/engagementsGet
      Policies:
        - Fn::ImportValue:
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"
        - Statement:
            - Effect: Allow
              Action:
              - dynamodb:*
              Resource: "*"
            - Effect: Deny
              Action:
              - dynamodb:*
              NotResource: !GetAtt resSalesforceTokenTable.Arn
      Events:
        api:
          Type: Api
          Properties:
            RestApiId: !Ref resApiGateway
            Path: /engagements # Unique URL path to hit this endpoint
            Method: GET # HTTP Method to be used to hit this endpoint

  # Lambda Function Definitions
  # resLambdaSfOpportunities: This Lambda function publishes data to the SNS topic. This Lambda is
  # subscribed to the SfOpportunities Adapter Queue.
  resLambdaSfOpportunities:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_sfOpportunities" # Use the handler filename at the end
      CodeUri: dist/sfOpportunities  # Use the filename of your handler, e.g. "healthGet.ts", but without the file extension
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt resSqsOpportunityAdapter.Arn
            Enabled: true
      Policies:
        - SQSPollerPolicy:
            QueueName:
              !GetAtt resSqsOpportunityAdapter.QueueName
        - SNSPublishMessagePolicy:
            TopicName:
              !GetAtt resInboundSnsOpportunityTopic.TopicName
        - Version: "2012-10-17"
          Statement: 
            Effect: Allow
            Action: 
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource: !GetAtt resSalesforceTokenTable.Arn
        - Version: "2012-10-17"
          Statement: 
            Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !FindInMap [ env, !Ref paramEnvironment, sfdcSecretManagerConsumerKeyArn ]
        - Fn::ImportValue: # This policy is needed for this Lambda Function to access the secrets created by the KMS CFN Stack
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"

  resLambdaPartnerOpportunities:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_partnerOpportunities"
      CodeUri: dist/partnerOpportunities  # Use the filename of your handler, e.g. "healthGet.ts", but without the file extension
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt resSqsPartnerOpportunityProcessor.Arn
            Enabled: true
      Policies:
        - SQSPollerPolicy:
            QueueName:
              !GetAtt resSqsPartnerOpportunityProcessor.QueueName
        - SNSPublishMessagePolicy:
            TopicName:
              !GetAtt resOutboundSnsOpportunityTopic.TopicName
        
  
  # resLambdaAceOpportunities: This Lambda function publishes data to the ACE s3 bucket. This Lambda is
  # subscribed to the AceOpportunities Adapter Queue.
  resLambdaAceOpportunities:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_sfAceOpportunities" # Use the handler filename at the end
      CodeUri: dist/sfAceOpportunities  # Use the filename of your handler, e.g. "healthGet.ts", but without the file extension
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt resSqsAceOpportunityProcessor.Arn
            Enabled: true
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:PutObjectAcl"
              Resource:
              - !Sub
                - "arn:aws:s3:::${s3AceBucketNameMap}"
                - {s3AceBucketNameMap: !FindInMap [ env, !Ref paramEnvironment, s3AceBucketNameMap ]}
              - !Sub
                - "arn:aws:s3:::${s3AceBucketNameMap}/*"
                - {s3AceBucketNameMap: !FindInMap [ env, !Ref paramEnvironment, s3AceBucketNameMap ]}
        - SQSPollerPolicy:
            QueueName:
              !GetAtt resSqsAceOpportunityProcessor.QueueName
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
              - "kms:Encrypt"
              - "kms:GenerateDataKey"
              Resource:
              - !FindInMap [ env, !Ref paramEnvironment, s3AceBucketKMSKeyARN ]
        - SNSPublishMessagePolicy:  # Gives access to publish to the specified sns topic
            TopicName:
              !GetAtt resSfOppSharedProcessorInTopic.TopicName        

  resACELeadAdapterLambda:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_aceLeads" # Use the handler filename at the end
      CodeUri: dist/aceLeads  # Use the filename of your handler, e.g. "healthGet.ts", but without the file extension
      Policies:
        - AWSLambdaExecute
        - Version: '2012-10-17' 
          Statement:
            - Effect: Allow
              Action:
              - "s3:PutObject"
              - "s3:GetObject"
              - "s3:PutObjectAcl"
              Resource:
              - !Sub
                - "arn:aws:s3:::${s3AceBucketNameMap}"
                - {s3AceBucketNameMap: !FindInMap [ env, !Ref paramEnvironment, s3AceBucketNameMap ]}
              - !Sub
                - "arn:aws:s3:::${s3AceBucketNameMap}/*"
                - {s3AceBucketNameMap: !FindInMap [ env, !Ref paramEnvironment, s3AceBucketNameMap ]}
        - SNSPublishMessagePolicy:  # Gives access to publish to the specified sns topic
            TopicName:
              !GetAtt resInboundPartnerLeadProcessorTopic.TopicName
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
              - "kms:Decrypt"
              - "kms:GenerateDataKey"
              Resource:
              - !FindInMap [ env, !Ref paramEnvironment, s3AceBucketKMSKeyARN ]

  # Ace Opportunity Queue
  resSqsAceOpportunityProcessor:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_ace_opportunityUpdated_queue
      VisibilityTimeout: 1200 # This is how long to wait (in seconds) in between Retries
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sqs

  # Subscribe to an event from another microservice
  # Ace Opportunity Adapter subscription with ACE Opportunity Processor Outbound SNS
  resSnsOpportunityProcessorSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref resOutboundSnsOpportunityTopic       
      Endpoint: !GetAtt resSqsAceOpportunityProcessor.Arn
      Protocol: sqs


  # Enable the following policy to allow an SNS Topic to send messages to the Example SQS Queue
  # Change the "aws:SourceArn" to be the SNS Topic that is publishing the event
  resSqsOpportunityProcessorPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: "*"
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
          Resource: !GetAtt resSqsAceOpportunityProcessor.Arn
      Queues:
        - !Ref resSqsAceOpportunityProcessor
  
  # resLambdaPartnerLeadProcessor: This Lambda parses incoming ACE data and passes it to the outbound SNS.
  resLambdaPartnerLeadProcessor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_aceLeadProcessor" # Use the handler filename at the end
      CodeUri: dist/aceLeadProcessor  # Use the filename of your handler, e.g. "healthGet.ts", but without the file extension
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt  resSqsPartnerLeadProcessor.Arn
            Enabled: true
      Policies:
        - SQSPollerPolicy:
            QueueName:
              !GetAtt resSqsPartnerLeadProcessor.QueueName
        - SNSPublishMessagePolicy:
            TopicName:
              !GetAtt resOutboundSnsPartnerLeadTopic.TopicName
        
  # Log Groups
  ### Defining log groups like this allows for two main objectives:
  ### A) Log retention is set so that old log entries are removed
  ### B) Log groups and all logs are deleted when the CloudFormation stack is deleted
  resLambdaHealthGetLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaHealthGet}"

  resLambdaExampleExternalGetLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaExampleExternalGet}"

  resLambdaExampleSnsListenerLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaExampleSnsListener}"

  resLambdaExampleDataGetLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaExampleDataGet}"

  resLambdaEngagementsGetLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaEngagementsGet}"

  resLambdaOpportunitiesGetLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaOpportunitiesGet}"

  resLambdaOpportunitiesPatchLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaOpportunitiesPatch}"

  resLambdaEngagementsPatchLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaEngagementsPatch}"

  resLambdaOppCreateExportJobLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaOppCreateExportJob}"

  resLambdaOppExecuteExportJobLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "/aws/lambda/${resLambdaOppExecuteExportJob}"

  resApiGatewayAccessLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !If
        - condNotFeatureBranch
        - !Sub "/aws/apigateway/accesslogs/${paramServiceName}/${paramEnvironment}"
        - !Sub "/aws/apigateway/accesslogs/${paramServiceName}/${paramEnvironment}/branch/${paramFeatureBranch}"

  resApiGatewayExecutionLogGroup:
    Type: AWS::Logs::LogGroup # checkov:skip=BC_AWS_LOGGING_21: Unencryted logs are fine at this point in time
    Properties:
      RetentionInDays: !Ref paramLogRetention
      LogGroupName: !Sub "API-Gateway-Execution-Logs_${resApiGateway}/${paramEnvironment}"

  # DynamoDB Table definitions
  ### Your application may use multiple DynamoDB tables. Define them all here.
  ### Delete this if you are not using DynamoDB. There is an provisioning cost to each DynamoDB table, so be aware of that.
  resDynamoTable:
    Type: AWS::DynamoDB::Table # checkov:skip=BC_AWS_GENERAL_6: Automatic backups not neccessary at this point in time
    Properties:
      TableName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: customerId
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: CustomerIdIndex
          KeySchema:
            - AttributeName: customerId
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: False  # Enable this for Point-In-Time Recovery
      SSESpecification:
        SSEEnabled: False  # Enable this to have server-side encryption
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment

  resSalesforceTokenTable:
    Type: AWS::DynamoDB::Table # checkov:skip=BC_AWS_GENERAL_6: Automatic backups not neccessary at this point in time
    Properties:
      TableName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_tokens"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: False
      SSESpecification:
        SSEEnabled: True
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: True
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment

  # Permissions
  AllowS3ToCallLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: "lambda:InvokeFunction"
      FunctionName: !Ref resLambdaS3EventListener
      Principal: s3.amazonaws.com
      SourceArn: !GetAtt resSalesforceEventBucket.Arn

  # SNS Topic definitions
  ### Your application may use SNS to create an event driven architecture between asynchronous processes.
  ### Delete this SNS Topic if you are not using SNS
  resExampleSnsTopic:
    Type: AWS::SNS::Topic
    DependsOn: resLambdaExampleSnsListener
    Properties:
      # SETUP: Customize with your own DisplayName and TopicName, but stick to the following naming convention
      DisplayName: !Sub "${paramEnvironment} ${paramFeatureBranch} ${paramServiceName} Example Topic"
      TopicName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}"
      Subscription:
      - Endpoint: !GetAtt resLambdaExampleSnsListener.Arn
        Protocol: lambda
      KmsMasterKeyId: alias/aws/sns

  # CloudWatch Dashboard to monitor metrics
  resDashBoardAPI:
    Type: AWS::CloudWatch::Dashboard
    Condition: conditionIsProdOrTest
    Properties:
      DashboardName: !Sub "${paramEnvironment}_${paramServiceName}_Monitoring_Dashboard"
      DashboardBody: { "Fn::Join": [ "", ['{"widgets":[
          {
            "type":"metric",
            "x": 0,
            "y": 0,
            "width": 8,
            "height": 6,
            "properties":{
              "metrics":[
                ["AWS/ApiGateway","5XXError", "ApiName",  "',!Sub "${paramEnvironment} ${paramServiceName} ${paramFeatureBranch}",'"]
              ],
              "title":"API Gateway 5xx Error",
              "period":21600,
              "region": "',!Sub "${AWS::Region}",'",
              "stat":"Sum"
            }
          },{
            "type":"metric",
            "x": 8,
            "y": 0,
            "width": 8,
            "height": 6,
            "properties":{
              "metrics":[
                ["AWS/ApiGateway","4XXError","ApiName", "',!Sub "${paramEnvironment} ${paramServiceName} ${paramFeatureBranch}",'"]
              ],
              "title":"API Gateway 4xx Error",
              "period":21600,
              "region": "',!Sub "${AWS::Region}",'",
              "stat":"Sum"
            }
          },{
            "type":"metric",
            "x": 16,
            "y": 0,
            "width": 8,
            "height": 6,
            "properties":{
              "metrics":[
                ["AWS/ApiGateway","Count","ApiName",  "',!Sub "${paramEnvironment} ${paramServiceName} ${paramFeatureBranch}",'"]
              ],
              "title":"Total Count of API Requests",
              "period":21600,
              "region": "',!Sub "${AWS::Region}",'",
              "stat":"Sum"
            }
          },{
            "type": "log",
            "x": 0,
            "y": 6,
            "width": 24,
            "height": 6,
            "properties": {
                "query": "SOURCE \"', !Sub "/aws/lambda/${paramEnvironment}_${paramServiceName}_healthGet",'\" | filter @type = \"REPORT\"\r\n| stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\r\n  min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\r\n  avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\r\n  max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\r\n  provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB,\r\n  avgMemoryUsedMB / provisonedMemoryMB * 100 as avgMemoryPercentageUsed,\r\n  maxMemoryUsedMB / provisonedMemoryMB * 100 as maxMemoryPercentageUsed",
                "region": "',!Sub "${AWS::Region}",'",
                "stacked": false,
                "title": "Memory Utilization for Health Lambda",
                "view": "table"
            }
          },{
            "type": "log",
            "x": 0,
            "y": 12,
            "width": 24,
            "height": 6,
            "properties": {
                "query": "SOURCE \"', !Sub "/aws/lambda/${paramEnvironment}_${paramServiceName}_opportunitiesGet",'\" | filter @type = \"REPORT\"\r\n| stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\r\n  min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\r\n  avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\r\n  max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\r\n  provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB,\r\n  avgMemoryUsedMB / provisonedMemoryMB * 100 as avgMemoryPercentageUsed,\r\n  maxMemoryUsedMB / provisonedMemoryMB * 100 as maxMemoryPercentageUsed",
                "region": "',!Sub "${AWS::Region}",'",
                "stacked": false,
                "title": "Memory Utilization for Opportunities Lambda",
                "view": "table"
            }
          },{
            "type": "log",
            "x": 0,
            "y": 18,
            "width": 24,
            "height": 6,
            "properties": {
                "query": "SOURCE \"', !Sub "/aws/lambda/${paramEnvironment}_${paramServiceName}_engagementsGet",'\" | filter @type = \"REPORT\"\r\n| stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\r\n  min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\r\n  avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\r\n  max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\r\n  provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB,\r\n  avgMemoryUsedMB / provisonedMemoryMB * 100 as avgMemoryPercentageUsed,\r\n  maxMemoryUsedMB / provisonedMemoryMB * 100 as maxMemoryPercentageUsed",
                "region": "',!Sub "${AWS::Region}",'",
                "stacked": false,
                "title": "Memory Utilization for Engagements Lambda",
                "view": "table"
            }
          },{
            "type": "log",
            "x": 0,
            "y": 24,
            "width": 24,
            "height": 6,
            "properties": {
                "query": "SOURCE \"', !Sub "/aws/lambda/${paramEnvironment}_${paramServiceName}_opportunitiesPatch",'\" | filter @type = \"REPORT\"\r\n| stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\r\n  min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\r\n  avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\r\n  max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\r\n  provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB,\r\n  avgMemoryUsedMB / provisonedMemoryMB * 100 as avgMemoryPercentageUsed,\r\n  maxMemoryUsedMB / provisonedMemoryMB * 100 as maxMemoryPercentageUsed",
                "region": "',!Sub "${AWS::Region}",'",
                "stacked": false,
                "title": "Memory Utilization for OpportunitiesPatch Lambda",
                "view": "table"
            }
          },{
            "type": "log",
            "x": 0,
            "y": 30,
            "width": 24,
            "height": 6,
            "properties": {
                "query": "SOURCE \"', !Sub "/aws/lambda/${paramEnvironment}_${paramServiceName}_engagementsPatch",'\" | filter @type = \"REPORT\"\r\n| stats max(@memorySize / 1024 / 1024) as provisonedMemoryMB,\r\n  min(@maxMemoryUsed / 1024 / 1024) as smallestMemoryRequestMB,\r\n  avg(@maxMemoryUsed / 1024 / 1024) as avgMemoryUsedMB,\r\n  max(@maxMemoryUsed / 1024 / 1024) as maxMemoryUsedMB,\r\n  provisonedMemoryMB - maxMemoryUsedMB as overProvisionedMB,\r\n  avgMemoryUsedMB / provisonedMemoryMB * 100 as avgMemoryPercentageUsed,\r\n  maxMemoryUsedMB / provisonedMemoryMB * 100 as maxMemoryPercentageUsed",
                "region": "',!Sub "${AWS::Region}",'",
                "stacked": false,
                "title": "Memory Utilization for EngagementsPatch Lambda",
                "view": "table"
            }
          }]}' ] ] }
  # TODO Create memory Utilization dashboard for every Lambda newly created

  resWafAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    DependsOn: resApiGatewayStage
    Properties:
      ResourceArn: !Sub arn:aws:apigateway:${AWS::Region}::/restapis/${resApiGateway}/stages/${paramEnvironment}
      WebACLArn:
        Fn::ImportValue:
          !If # Use dev arn for local environment when importing
            - conditionIsLocal
            - !Sub "dev-${paramServiceName}-waf-arn"
            - !Sub "${paramEnvironment}-${paramServiceName}-waf-arn"

  # API Gateway definition
  # Explicitly defining an API Gateway in SAM is optional, but doing so
  # gives us a lot more flexibility in configuring the features of the API Gateway
  # SAM local tools have support for CFT intrinsic functions, so we can reference
  # the Lambda function's logical ID using ${resLambdaHealthGet.Arn}

  # The decision to use an inline Swagger body instead of using the DefinitionUri property
  # is because SAM Local doesn't support the AWS:Include function yet
  resApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Auth:
        DefaultAuthorizer: AWS_IAM
      StageName: !Ref paramEnvironment
      AccessLogSetting:
        DestinationArn: !GetAtt resApiGatewayAccessLogGroup.Arn
        Format: $context.identity.sourceIp $context.identity.caller $context.identity.user [$context.requestTime] "$context.httpMethod $context.resourcePath $context.protocol" $context.status $context.responseLength $context.requestId
      Cors:
        AllowMethods: "'GET,POST,PUT,DELETE,PATCH'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,correlation-object,x-amz-security-token'"
        AllowOrigin: "'*'" # SETUP: Change this to your front-end URL for better security
      MethodSettings:
        - LoggingLevel: "INFO" # In order to enable API Gateway logging, permissions must be setup: https://aws.amazon.com/premiumsupport/knowledge-center/api-gateway-cloudwatch-logs/
          MetricsEnabled: True
          DataTraceEnabled: True
          ResourcePath: "/*"
          HttpMethod: "*"
      MinimumCompressionSize: 860
      OpenApiVersion: "2.0"
      TracingEnabled: !If # Turn on X-Ray Tracing for Prod only
        - conditionIsProd
        - True
        - !Ref AWS::NoValue
      Tags:
        Application: !Ref paramServiceName
        Environment: !Ref paramEnvironment
      GatewayResponses: # Return CORS Headers for 401 and 403 responses
        UNAUTHORIZED:
          StatusCode: 401
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            "application/json": '{ "message": $context.error.messageString }'
        ACCESS_DENIED:
          StatusCode: 403
          ResponseParameters:
            Headers:
              Access-Control-Expose-Headers: "'*'"
              Access-Control-Allow-Origin: "'*'"
          ResponseTemplates:
            "application/json": '{ "message": $context.error.messageString }'
      # TODO: Add support for the api models here
      # Models:
      DefinitionBody:
        swagger: "2.0"
        basePath: !Sub "/${paramServiceName}"
        info:
          title: !Sub "${paramEnvironment} ${paramServiceName} ${paramFeatureBranch}"
          description: Slalom Galactic Salesforce Integration
          version: 0.1.0
        schemes:
        - https
        produces:
        - application/json
        securityDefinitions:
          APIKeyHeader:
            type: apiKey
            in: header
            name: x-api-key
        paths:
          /health:
            get:
              produces:
              - application/json
              summary: Ping the service for health status
              responses:
                '200':
                  description: Health Status
                  schema:
                    "$ref": "#/definitions/HealthStatusResponse"
                '500':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
                '504':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resLambdaHealthGet.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy
              security: []

          /example-external:
            get:
              produces:
              - application/json
              # Example: Uncomment the following two line to show
              #   how an endpoint can be restricted to require an API Key
              #security:
              #- APIKeyHeader: []
              summary: Ping the example external service
              responses:
                '200':
                  description: Example External Dependency
                  schema:
                    "$ref": "#/definitions/Empty"
                '500':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
                '504':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resLambdaExampleExternalGet.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

          /opportunities/export:
            post:
              produces:
              - application/json
              summary: Return opportunities from Salesforce
              responses:
                '202':
                  description: export job is successfully created
                  schema:
                    "$ref": "#/definitions/Empty"
                '500':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
                '400':
                  description: Bad Request Error
                  schema:
                    "$ref": "#/definitions/BadRequest"
                '504':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resLambdaOppCreateExportJob.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

          /opportunities:
            get:
              produces:
              - application/json
              summary: Return opportunities from Salesforce
              responses:
                '200':
                  description: Opportunities returned from Salesforce
                  schema:
                    "$ref": "#/definitions/OpportunitiesGetResponse"
                '500':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
                '400':
                  description: Bad Request Error
                  schema:
                    "$ref": "#/definitions/BadRequest"
                '504':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resLambdaOpportunitiesGet.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

          /opportunities/{OpportunityId}:
            patch:
              produces:
              - application/json
              summary: Update Opportunity in Salesforce
              responses:
                '200':
                  description: Opportunity updated in Salesforce
                  schema:
                    "$ref": "#/definitions/Empty"
                '500':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
                '400':
                  description: Bad Request Error
                  schema:
                    "$ref": "#/definitions/BadRequest"
                '504':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resLambdaOpportunitiesPatch.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

          /engagements:
            get:
              produces:
              - application/json
              summary: Return engagements from Salesforce
              responses:
                '200':
                  description: Engagements returned from Salesforce
                  schema:
                    "$ref": "#/definitions/EngagementsGetResponse"
                '500':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
                '400':
                  description: Bad Request Error
                  schema:
                    "$ref": "#/definitions/BadRequest"
                '504':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resLambdaEngagementsGet.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

          /engagements/{EngagementId}:
            patch:
              produces:
              - application/json
              summary: Update Engagement in Salesforce
              responses:
                '200':
                  description: Engagement updated in Salesforce
                  schema:
                    "$ref": "#/definitions/Empty"
                '500':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
                '400':
                  description: Bad Request Error
                  schema:
                    "$ref": "#/definitions/BadRequest"
                '504':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resLambdaEngagementsPatch.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

          /example-data:
            get:
              produces:
              - application/json
              summary: Get a list of data items from a DynamoDB table
              responses:
                '200':
                  description: List of Data Items
                  schema:
                    "$ref": "#/definitions/DataListResponse"
                '500':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
                '504':
                  description: Internal Server Error
                  schema:
                    "$ref": "#/definitions/Error"
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri:
                  Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${resLambdaExampleDataGet.Arn}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                type: aws_proxy

        # TODO: When reverse mapping is implemented, the responses will need to be updated here.
        definitions:
          Empty:
            type: object
            title: Empty Schema
          BadRequest:
            type: object
            properties:
              errorCode:
                type: integer
                format: int32
              message:
                type: string
              data:
                type: object
          EngagementsGetResponse:
            type: object
            properties:
              result:
                "$ref": "#/definitions/EngagementsGet"
              required:
              - result
          EngagementsGet:
            type: object
            properties:
              totalSize:
                type: integer
                format: int32
                records:
                  type: array
                  items:
                    "$ref": "#/definitions/Engagement"
          Engagement:
            type: object
            properties:
              attributes:
                type: object
                properties:
                  type:
                    type: string
                  url:
                    type: string
              Account__c:
                type: string
              CreatedById:
                type: string
              CreatedDate:
                type: string
              CurrencyIsoCode:
                type: string
              Id:
                type: string
              IsDeleted:
                type: string
              LastActivityDate:
                type: string
              LastModifiedById:
                type: string
              LastModifiedDate:
                type: string
              Name:
                type: string
              OwnerId:
                type: string
              Primary_Market__c:
                type: string
              RecordTypeId:
                type: string
              Submitted_for_approval__c:
                type: boolean
              SystemModstamp:
                type: string
              Wizard_Stage__c:
                type: string
              Status__c:
                type: string
          OpportunitiesGetResponse:
            type: object
            properties:
              result:
                "$ref": "#/definitions/OpportunitiesGet"
            required:
            - result
          OpportunitiesGet:
            type: object
            properties:
              totalSize:
                type: integer
                format: int32
              done:
                type: boolean
              records:
                type: array
                items:
                  "$ref": "#/definitions/Opportunity"
          Opportunity:
            type: object
            properties:
              attributes:
                type: object
                properties:
                  type:
                    type: string
                  url:
                    type: string
              AccountId:
                type: string
              Amount:
                type: integer
                format: int32
              Id:
                type: string
              Markets_Text__c:
                type: string
              Name:
                type: string
              Practices__c:
                type: string
              Project_Start_Date__c:
                type: string
              StageName:
                type: string
              Technologies_Languages__c:
                type: string
              Work_Tags__c:
                type: string
              Work_Tag_Details__c:
                type: string
              LastModifiedDate:
                type: string
          HealthStatusResponse:
            type: object
            properties:
              result:
                "$ref": "#/definitions/HealthStatus"
            required:
            - result
          EventListResponse:
            type: object
            properties:
              result:
                type: array
                items:
                  "$ref": "#/definitions/Event"
            required:
            - result
          Event:
            type: object
            properties:
              id:
                type: string
          Error:
            type: object
            properties:
              errorCode:
                type: integer
                format: int32
              message:
                type: string
              data:
                type: object
          HealthStatus:
            type: object
            properties:
              status:
                type: string
              exampleExternalStatus:
                type: string
              component2Status:
                type: string
              dbStatus:
                type: string
              version:
                type: string
              region:
                type: string
              environmentName:
                type: string
              logLevel:
                type: string
              executionTime:
                type: integer
                format: int32
              exampleExternalResponseTime:
                type: string
              component2ResponseTime:
                type: string
              dbResponseTime:
                type: string
              errors:
                type: array
                items: string

  # The BasePathMapping will fail if there is not a "Custom Domain Name" configured in the API Gateway Console. See README.md for details.
  # This can be disabled by removing this resource. You will then need to get the API Gateway's stage url from the API Gateway resource.
  resAPIBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: conditionBuildBasePath
    DependsOn: "resApiGatewayStage"
    Properties:
      BasePath: !If
        - condNotFeatureBranch
        - !Sub "${paramServiceName}"
        - !Sub "${paramServiceName}-${paramFeatureBranch}"
      DomainName: !FindInMap [ env, !Ref paramEnvironment, domain ]
      RestApiId: !Ref resApiGateway
      Stage: !Ref paramEnvironment

  # Api Key Resources Definitions
  ### resApiKey: This resource creates a randomly generated Api key for use with a usage plan
  ### The key value can be static by setting here. If no static value set, the key value will change whenever the stack is created
  resApiKey:
    Type: AWS::ApiGateway::ApiKey
    DependsOn: resApiGateway
    Properties:
      Description: "Generated CloudFormation API Key"
      Enabled: true

  ### resUsagePlan: Creates a usage plan that will have the associated key above
  ### No limitations set on this usage plan. Those can be added in properties.
  resUsagePlan:
    Type: AWS::ApiGateway::UsagePlan
    DependsOn: resApiGatewayStage
    Properties:
      UsagePlanName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_usagePlan"
      Description: Unlimited usage plan
      ApiStages:
      - ApiId: !Ref resApiGateway
        Stage: !Ref paramEnvironment

  ### resUsagePlanKey: Creates an association between the usage plan and api key defined above
  resUsagePlanKey:
    Type: AWS::ApiGateway::UsagePlanKey
    Properties :
      KeyId: !Ref resApiKey
      KeyType: API_KEY
      UsagePlanId: !Ref resUsagePlan

  # Create a healthcheck object for permanent deployments (not a feature branch)
  # ref: https://docs.aws.amazon.com/Route53/latest/APIReference/API_HealthCheckConfig.html
  resHealthCheck:
    Type: "AWS::Route53::HealthCheck"
    Condition: conditionIsProd
    Properties:
      HealthCheckConfig:
        Type: "HTTPS"
        ResourcePath: !Sub "/${paramServiceName}/health"
        FullyQualifiedDomainName: !FindInMap [ env, !Ref paramEnvironment, domain ]
        RequestInterval: "30"
        FailureThreshold: "3"
        EnableSNI: True
      HealthCheckTags:
        - Key: Name
          Value: !Ref paramServiceName

  # API Gateway CloudWatch Alarms and associated notifications via SNS
  resSnsAlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Condition: conditionIsProdOrTest
    Properties:
      DisplayName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_api-gateway-alarms"
      TopicName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_api-gateway-alarms"
      KmsMasterKeyId: alias/aws/sns
    # IMPORTANT: After Prod Deployment, define how your organization will listen to this SNS topic


  resSnsAlarmNotificationTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Condition: conditionIsProdOrTest
    Properties:
      Topics:
        - !Ref resSnsAlarmNotificationTopic
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AllowAlarmsPublish
            Effect: Allow
            Action: sns:Publish
            Resource: !Ref resSnsAlarmNotificationTopic
            Principal:
              AWS: "*"
            Condition:
              StringLike:
                aws:SourceArn: !Sub arn:aws:cloudwatch:${AWS::Region}:${AWS::AccountId}:alarm:${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_*

  # CloudWatch Alarms
  resAlarmRestApi500:
    Type: AWS::CloudWatch::Alarm
    Condition: conditionIsProdOrTest
    Properties:
      AlarmName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_5XXError"
      AlarmDescription: RestAPI 500 Error > 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      DatapointsToAlarm: 1
      Dimensions:
        - Name: ApiName # This must match the Name property of the Rest API
          Value: !Sub "${paramEnvironment} ${paramServiceName} ${paramFeatureBranch}"
        - Name: Stage
          Value: !Ref paramEnvironment
      MetricName: 5XXError
      Namespace: AWS/ApiGateway
      AlarmActions:
        - !Ref resSnsAlarmNotificationTopic
      EvaluationPeriods: 1
      Period: 60
      Statistic: Sum
      # Adjust threshold as necessary
      Threshold: 1
      TreatMissingData: ignore

  resAlarmRestApi400:
    Type: AWS::CloudWatch::Alarm
    Condition: conditionIsProdOrTest
    Properties:
      AlarmName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_4XXError"
      AlarmDescription: RestAPI 400 Error > 10
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: ApiName # This must match the Name property of the Rest API
          Value: !Sub "${paramEnvironment} ${paramServiceName} ${paramFeatureBranch}"
        - Name: Stage
          Value: !Ref paramEnvironment
      MetricName: 4XXError
      Namespace: AWS/ApiGateway
      AlarmActions:
        - !Ref resSnsAlarmNotificationTopic
      EvaluationPeriods: 1
      Period: 3600
      Statistic: Sum
      # Adjust threshold as necessary
      Threshold: 10
      TreatMissingData: ignore

  # SFDC Opportunity Adapter SNS Topic.
  resInboundSnsOpportunityTopic:  
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: !Sub ${paramEnvironment}${paramFeatureBranch}_partner_opportunity_topic
        TopicName: !Sub ${paramEnvironment}${paramFeatureBranch}_partner_opportunity_topic
        Tags:
          - Key: Application
            Value: !Ref paramServiceName
          - Key: Environment
            Value: !Ref paramEnvironment
        KmsMasterKeyId: alias/aws/sns

  # SQS Queue for subscribing to events from other microservices
  # In our reference architecture pattern, SQS is used for ingress of asynchronous events
  resSqsOpportunityAdapter:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_SqsOpportunityAdapter
      VisibilityTimeout: 1200 # This is how long to wait (in seconds) in between Retries
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sqs

  # Subscribe to an event from another microservice
  # This assumes that some other microservice publishes events through SNS
  # This microservice will have the SQS Queue subscribe to the external SNS Topic
  resSnsSubscription:
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn:
        !If # There isn't a SNS topic for the local env so we use the SNS topic in the dev env instead
          - conditionIsLocal
          - !Sub
            - "arn:aws:sns:${AWS::Region}:${awsDeveloperGalacticAccountId}:dev_sales_opportunityUpdated"
            - {awsDeveloperGalacticAccountId: !FindInMap [ env, !Ref paramEnvironment, awsDeveloperGalacticAccountId ]}
          - !Sub
            - "arn:aws:sns:${AWS::Region}:${awsDeveloperGalacticAccountId}:${paramEnvironment}_sales_opportunityUpdated"
            - {awsDeveloperGalacticAccountId: !FindInMap [ env, !Ref paramEnvironment, awsDeveloperGalacticAccountId ]}
      Endpoint: !GetAtt resSqsOpportunityAdapter.Arn
      Protocol: sqs

  resOutboundSnsOpportunityTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${paramEnvironment} ${paramFeatureBranch} ${paramServiceName} outbound partner opportunity topic
      TopicName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_outbound_partner_opportunity_topic
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sns
          
  # Enable the following policy to allow an SNS Topic to send messages to the Example SQS Queue
  # Change the "aws:SourceArn" to be the SNS Topic that is publishing the event
  resSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: "*"
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
          Resource: !GetAtt resSqsOpportunityAdapter.Arn
          Condition:
            ArnEquals:
              "aws:SourceArn":
                !If # There isn't a SNS topic for the local env so we use the SNS topic in the dev env instead
                  - conditionIsLocal
                  - !Sub
                    - "arn:aws:sns:${AWS::Region}:${awsDeveloperGalacticAccountId}:dev_sales_opportunityUpdated"
                    - {awsDeveloperGalacticAccountId: !FindInMap [ env, !Ref paramEnvironment, awsDeveloperGalacticAccountId ]}
                  - !Sub
                    - "arn:aws:sns:${AWS::Region}:${awsDeveloperGalacticAccountId}:${paramEnvironment}_sales_opportunityUpdated"
                    - {awsDeveloperGalacticAccountId: !FindInMap [ env, !Ref paramEnvironment, awsDeveloperGalacticAccountId ]}
      Queues:
        - !Ref resSqsOpportunityAdapter

  # Partner Opportunity Processor SQS Queue. 
  resSqsPartnerOpportunityProcessor:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${paramEnvironment}${paramFeatureBranch}_partner_opportunityUpdated_queue
      VisibilityTimeout: 1200
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sqs

  # SQS Queue Policy for resSqsPartnerOpportunityProcessor
  resPartnerOpportunityProcessoSqsPolicy: 
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: 
            Service: "sns.amazonaws.com"
          Action: sqs:SendMessage
          Resource: !GetAtt resSqsPartnerOpportunityProcessor.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref resInboundSnsOpportunityTopic
      Queues:
        - !Ref resSqsPartnerOpportunityProcessor

  resSqsPartnerOpportunitySubcription: 
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref resInboundSnsOpportunityTopic
      Endpoint: !GetAtt resSqsPartnerOpportunityProcessor.Arn
      Protocol: sqs
  
  ######### PARTNER LEAD PROCESSOR ##############
  resSqsPartnerLeadProcessor:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_SqsPartnerLeadProcessor
      VisibilityTimeout: 1200 # This is how long to wait (in seconds) in between Retries
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sqs

  resInboundPartnerLeadProcessorTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${paramEnvironment} ${paramFeatureBranch} ${paramServiceName} inbound partner lead processor topic
      TopicName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_inbound_partner_lead_processor_topic
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sns

  resSqsPartnerLeadSubscription: 
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref resInboundPartnerLeadProcessorTopic
      Endpoint: !GetAtt resSqsPartnerLeadProcessor.Arn
      Protocol: sqs

  resPartnerLeadProcessorSqsPolicy: 
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: 
            Service: "sns.amazonaws.com"
          Action: sqs:SendMessage
          Resource: !GetAtt resSqsPartnerLeadProcessor.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: !Ref resInboundPartnerLeadProcessorTopic
      Queues:
        - !Ref resSqsPartnerLeadProcessor

  # SFCD Lead Adapter Queue
  resSFDCLeadAdapterQueue:
    Type: AWS::SQS::Queue
    Properties:   
      QueueName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_SFDC_lead_adapter_queue
      VisibilityTimeout: 100
      RedrivePolicy:
        deadLetterTargetArn: 
          Fn::GetAtt:
            - "resMasterIntegrationDLQ"
            - "Arn"
        maxReceiveCount: 5
      Tags:
      - Key: Application
        Value: !Ref paramServiceName
      - Key: Environment
        Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sqs
        
  # Partner Lead Processor outbound SNS Topic.
  resOutboundSnsPartnerLeadTopic:  
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: !Sub ${paramEnvironment}${paramFeatureBranch} partner lead outbound topic
        TopicName: !Sub ${paramEnvironment}${paramFeatureBranch}_partner_lead_outbound_topic
        Tags:
          - Key: Application
            Value: !Ref paramServiceName
          - Key: Environment
            Value: !Ref paramEnvironment
        KmsMasterKeyId: alias/aws/sns

  # QueuePolicy for SFDC Lead Adapter Queue
  resSFDCLeadAdapterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: 
            Service: "sns.amazonaws.com"
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
          Resource: !GetAtt resSFDCLeadAdapterQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: 
                - !Ref resOutboundSnsPartnerLeadTopic
      Queues:
        - !Ref resSFDCLeadAdapterQueue

  resSFDCLeadAdapterLambda:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: dist/sfLeadAdapter
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_SFDCLeadAdapterLambda" 
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt resSFDCLeadAdapterQueue.Arn
            Enabled: true
      Policies:
        - SQSPollerPolicy:
            QueueName:
              !GetAtt resSFDCLeadAdapterQueue.QueueName
        - Version: "2012-10-17"
          Statement: 
            Effect: Allow
            Action: 
              - dynamodb:GetItem
              - dynamodb:PutItem
            Resource: !GetAtt resSalesforceTokenTable.Arn
        - Version: "2012-10-17"
          Statement: 
            Effect: Allow
            Action: secretsmanager:GetSecretValue
            Resource: !FindInMap [ env, !Ref paramEnvironment, sfdcSecretManagerConsumerKeyArn ]
        - Fn::ImportValue: # This policy is needed for this Lambda Function to access the secrets created by the KMS CFN Stack
            !Sub "export-iam-decrypt-managed-policy-${paramServiceName}"

  resPTNRLeadProcessorOutSubSFDC: 
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref resOutboundSnsPartnerLeadTopic
      Endpoint: !GetAtt resSFDCLeadAdapterQueue.Arn
      Protocol: sqs

  # Shared Opportunity Inbound SNS
  resSfOppSharedProcessorInTopic:  
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: !Sub ${paramEnvironment}${paramFeatureBranch} sf inbound shared opportubity Topic
      TopicName: !Sub ${paramEnvironment}${paramFeatureBranch}_sf_inbound_shared_opportunity_topic
      Tags:
        - Key: Application
          Value: !Ref paramServiceName
        - Key: Environment
          Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sns

  resSfOppSharedProcessorInSub: 
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref resSfOppSharedProcessorInTopic       
      Endpoint: !GetAtt resPTNRSharedProcessorQueue.Arn
      Protocol: sqs

  # Shared Opportunity Router Queue
  resPTNRSharedProcessorQueue:
    Type: AWS::SQS::Queue
    Properties:   
      QueueName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_PTNR_shared_Opp_processor_queue
      VisibilityTimeout: 100
      RedrivePolicy:
        deadLetterTargetArn: 
          Fn::GetAtt:
            - "resMasterIntegrationDLQ"
            - "Arn"
        maxReceiveCount: 5
      Tags:
      - Key: Application
        Value: !Ref paramServiceName
      - Key: Environment
        Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sqs

  # Shared Opportunity Router Queue Policy
  resPTNRSharedProcessorQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: 
            Service: "sns.amazonaws.com"
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
          Resource: !GetAtt resPTNRSharedProcessorQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: 
                - !Ref resSfOppSharedProcessorInTopic
      Queues:
        - !Ref resPTNRSharedProcessorQueue
  
  # Shared Opportunity Outbound SNS.
  resSfOppSharedProcessorOutTopic:  
      Type: AWS::SNS::Topic
      Properties:
        DisplayName: !Sub ${paramEnvironment}${paramFeatureBranch} sf outbound shared opportubity Topic
        TopicName: !Sub ${paramEnvironment}${paramFeatureBranch}_sf_outbound_shared_opportunity_topic
        Tags:
          - Key: Application
            Value: !Ref paramServiceName
          - Key: Environment
            Value: !Ref paramEnvironment
        KmsMasterKeyId: alias/aws/sns

  resSfOppSharedProcessorOutSub: 
    Type: AWS::SNS::Subscription
    Properties:
      TopicArn: !Ref resSfOppSharedProcessorOutTopic       
      Endpoint: !GetAtt resSFDCSharedAdapterQueue.Arn
      Protocol: sqs

  # resLambdaSharedOppProcessor: This Lambda passes updated ACE object information to salesforce.
  resLambdaSharedOppProcessor:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_sfSharedOppProcessor" # Use the handler filename at the end
      CodeUri: dist/sfSharedOppProcessor  # Use the filename of your handler, e.g. "healthGet.ts", but without the file extension
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt resPTNRSharedProcessorQueue.Arn
            Enabled: true
      Policies:
        - SNSPublishMessagePolicy:
            TopicName:
              !GetAtt resSfOppSharedProcessorOutTopic.TopicName

# Mastter Integration Dead Letter Queue
  resMasterIntegrationDLQ:  
    Type: AWS::SQS::Queue
    Properties:   
      QueueName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_master_integration_DLQ
      Tags:
      - Key: Application
        Value: !Ref paramServiceName
      - Key: Environment
        Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sqs

  # Inbound SFCD Shared Opportunity Queue
  resSFDCSharedAdapterQueue:
    Type: AWS::SQS::Queue
    Properties:   
      QueueName: !Sub ${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_SFDC_shared_Opp_adapter_queue
      VisibilityTimeout: 100
      RedrivePolicy:
        deadLetterTargetArn: 
          Fn::GetAtt:
            - "resMasterIntegrationDLQ"
            - "Arn"
        maxReceiveCount: 5
      Tags:
      - Key: Application
        Value: !Ref paramServiceName
      - Key: Environment
        Value: !Ref paramEnvironment
      KmsMasterKeyId: alias/aws/sqs

  # Inbound SFDC Shared opportunity Queue policy
  resSFDCSharedAdapterQueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          Effect: Allow
          Principal: 
            Service: "sns.amazonaws.com"
          Action:
            - sqs:SendMessage
            - sqs:ReceiveMessage
          Resource: !GetAtt resSFDCSharedAdapterQueue.Arn
          Condition:
            ArnEquals:
              aws:SourceArn: 
                - !Ref resSfOppSharedProcessorOutTopic
      Queues:
        - !Ref resSFDCSharedAdapterQueue
 
  resLambdaSharedOppAdapter:
    Type: AWS::Serverless::Function
    Properties:
      Handler: handler.handler
      FunctionName: !Sub "${paramEnvironment}${paramFeatureBranch}_${paramServiceName}_sfSharedOppAdapter" # Use the handler filename at the end
      CodeUri: dist/sfSharedOppAdapter  # Use the filename of your handler, e.g. "healthGet.ts", but without the file extension
      Events:
        SQSEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt resSFDCSharedAdapterQueue.Arn
            Enabled: true
      Policies:
        - SQSPollerPolicy:
            QueueName:
              !GetAtt resSFDCSharedAdapterQueue.QueueName
Outputs:
  ApiId:
    Description: Unique API identifier
    Value: !Ref resApiGateway
  ApiUrl:
    Description: API base URL
    Value: !If
      - conditionBuildBasePath
      - !Sub
        - "https://${domain}/${basePath}"
        - domain: !FindInMap [ env, !Ref paramEnvironment, domain ]
          basePath: !If
            - condNotFeatureBranch
            - !Sub "${paramServiceName}"
            - !Sub "${paramServiceName}-${paramFeatureBranch}"
      - !Sub "https://${resApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${paramEnvironment}"
  ApiHealthEndpoint:
    Description: Specific URL for the health endpoint
    Value: !If
      - conditionBuildBasePath
      - !Sub
        - "https://${domain}/${basePath}/health"
        - domain: !FindInMap [ env, !Ref paramEnvironment, domain ]
          basePath: !If
            - condNotFeatureBranch
            - !Sub "${paramServiceName}"
            - !Sub "${paramServiceName}-${paramFeatureBranch}"
      - !Sub "https://${resApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${paramEnvironment}/health"
  OutboundSNSOppTopicArn: 
    Description: Output the Opportunities Outbound SNS Topic Arn
    Value: !Ref resOutboundSnsOpportunityTopic
    Export:
      Name: !Sub "${paramEnvironment}${paramFeatureBranch}-OutboundSNSOppTopicArn"
  OutboundSNSAceLeadsTopicArn: 
    Description: The Ace Leads outbound SNS ARN is exported for use in other stacks withint the same AWS account. 
    Value: !Ref resOutboundSnsPartnerLeadTopic
    Export:
      Name: !Sub "${paramEnvironment}${paramFeatureBranch}-${paramServiceName}-OutboundSNSAceTopicArn" 
